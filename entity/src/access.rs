//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use actix_web::body::BoxBody;
use actix_web::http::header::ContentType;
use actix_web::http::StatusCode;
use actix_web::{HttpRequest, HttpResponse, Responder};
use macro_trait::Responder;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn schema_name(&self) -> Option<&str> {
        Some("redog")
    }
    fn table_name(&self) -> &str {
        "access"
    }
}

#[derive(
    Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize, Responder,
)]
pub struct Model {
    pub id: i32,
    pub access_name: String,
    pub create_time: Option<DateTime>,
    pub update_time: Option<DateTime>,
    pub is_delete: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    AccessName,
    CreateTime,
    UpdateTime,
    IsDelete,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::AccessName => ColumnType::String(None).def().unique(),
            Self::CreateTime => ColumnType::DateTime.def().null(),
            Self::UpdateTime => ColumnType::DateTime.def().null(),
            Self::IsDelete => ColumnType::Boolean.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, PartialEq, DeriveModel, Eq, Serialize, Deserialize)]
pub struct Schema {
    pub id: Option<i32>,
    pub access_name: String,
    pub create_time: Option<DateTime>,
    pub update_time: Option<DateTime>,
    pub is_delete: Option<bool>,
}

impl From<Schema> for Model {
    fn from(value: Schema) -> Self {
        Self {
            id: value.id.unwrap(),
            access_name: value.access_name,
            create_time: value.create_time,
            update_time: value.update_time,
            is_delete: value.is_delete,
        }
    }
}
